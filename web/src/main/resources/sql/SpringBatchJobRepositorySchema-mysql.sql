
CREATE TABLE BATCH_JOB_INSTANCE  (
	JOB_INSTANCE_ID BIGINT  NOT NULL PRIMARY KEY COMMENT '主键id',
	VERSION BIGINT COMMENT '任务版本',
	JOB_NAME VARCHAR(100) NOT NULL COMMENT '任务名称',
	JOB_KEY VARCHAR(32) NOT NULL COMMENT '任务标识',
	constraint JOB_INST_UN unique (JOB_NAME, JOB_KEY)
) ENGINE=InnoDB COMMENT 'spring batch job 示例表';

CREATE TABLE BATCH_JOB_EXECUTION  (
	JOB_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY COMMENT '主键标识',
	VERSION BIGINT  COMMENT '版本',
	JOB_INSTANCE_ID BIGINT NOT NULL COMMENT '任务标识',
	CREATE_TIME DATETIME NOT NULL COMMENT '创建时间',
	START_TIME DATETIME DEFAULT NULL  COMMENT '任务开始执行时间',
	END_TIME DATETIME DEFAULT NULL COMMENT '任务执行结束时间',
	STATUS VARCHAR(10) COMMENT '任务状态',
	EXIT_CODE VARCHAR(100) COMMENT '任务退出码',
	EXIT_MESSAGE VARCHAR(2500) COMMENT '任务退出消息',
	LAST_UPDATED DATETIME COMMENT '最近更新时间',
	constraint JOB_INST_EXEC_FK foreign key (JOB_INSTANCE_ID)
	references BATCH_JOB_INSTANCE(JOB_INSTANCE_ID)
) ENGINE=InnoDB COMMENT 'batch 任务执行记录';

CREATE TABLE BATCH_JOB_EXECUTION_PARAMS  (
	JOB_EXECUTION_ID BIGINT NOT NULL COMMENT 'BATCH_JOB_EXECUTION 主键',
	TYPE_CD VARCHAR(6) NOT NULL COMMENT '任务类型',
	KEY_NAME VARCHAR(100) NOT NULL COMMENT '任务类型标识',
	STRING_VAL VARCHAR(250) COMMENT '字符串参数',
	DATE_VAL DATETIME DEFAULT NULL COMMENT '日期参数',
	LONG_VAL BIGINT COMMENT '数值参数',
	DOUBLE_VAL DOUBLE PRECISION COMMENT '浮点参数',
	IDENTIFYING CHAR(1) NOT NULL ,
	constraint JOB_EXEC_PARAMS_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB COMMENT '任务执行器参数';

CREATE TABLE BATCH_STEP_EXECUTION  (
	STEP_EXECUTION_ID BIGINT  NOT NULL PRIMARY KEY COMMENT '主键id',
	VERSION BIGINT NOT NULL COMMENT '版本',
	STEP_NAME VARCHAR(100) NOT NULL COMMENT '步骤名称',
	JOB_EXECUTION_ID BIGINT NOT NULL COMMENT '任务执行器id',
	START_TIME DATETIME NOT NULL COMMENT '步骤开始执行时间',
	END_TIME DATETIME DEFAULT NULL  COMMENT '步骤结束执行时间',
	STATUS VARCHAR(10) COMMENT '步骤执行状态',
	COMMIT_COUNT BIGINT COMMENT '提交次数',
	READ_COUNT BIGINT COMMENT 'read step 执行次数',
	FILTER_COUNT BIGINT COMMENT 'filter step 执行次数',
	WRITE_COUNT BIGINT COMMENT 'write step 执行次数',
	READ_SKIP_COUNT BIGINT COMMENT 'read step跳过次数',
	WRITE_SKIP_COUNT BIGINT COMMENT 'write step 跳过次数',
	PROCESS_SKIP_COUNT BIGINT COMMENT 'spring process 跳过次数',
	ROLLBACK_COUNT BIGINT COMMENT '回滚次数',
	EXIT_CODE VARCHAR(100) COMMENT '退出码',
	EXIT_MESSAGE VARCHAR(2500) COMMENT '退出消息',
	LAST_UPDATED DATETIME COMMENT '最近更新时间',
	constraint JOB_EXEC_STEP_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB COMMENT 'spring batch step 执行记录';

CREATE TABLE BATCH_STEP_EXECUTION_CONTEXT  (
	STEP_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY COMMENT '主键id',
	SHORT_CONTEXT VARCHAR(2500) NOT NULL COMMENT 'json 形式上下文',
	SERIALIZED_CONTEXT TEXT COMMENT '其他序列化格式上下文',
	constraint STEP_EXEC_CTX_FK foreign key (STEP_EXECUTION_ID)
	references BATCH_STEP_EXECUTION(STEP_EXECUTION_ID)
) ENGINE=InnoDB COMMENT 'spring batch任务step执行上下文';

CREATE TABLE BATCH_JOB_EXECUTION_CONTEXT  (
	JOB_EXECUTION_ID BIGINT NOT NULL PRIMARY KEY COMMENT '主键标识',
	SHORT_CONTEXT VARCHAR(2500) NOT NULL COMMENT 'json 形式上下文',
	SERIALIZED_CONTEXT TEXT COMMENT '其他序列化格式上下文',
	constraint JOB_EXEC_CTX_FK foreign key (JOB_EXECUTION_ID)
	references BATCH_JOB_EXECUTION(JOB_EXECUTION_ID)
) ENGINE=InnoDB COMMENT 'spring batsh 任务执行上下文';

CREATE TABLE BATCH_STEP_EXECUTION_SEQ (
	ID BIGINT NOT NULL COMMENT 'id',
	UNIQUE_KEY CHAR(1) NOT NULL COMMENT '序列号',
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_STEP_EXECUTION_SEQ values(0, '0');

CREATE TABLE BATCH_JOB_EXECUTION_SEQ (
	ID BIGINT NOT NULL COMMENT 'id',
	UNIQUE_KEY CHAR(1) NOT NULL COMMENT '序列号',
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_JOB_EXECUTION_SEQ values(0, '0');

CREATE TABLE BATCH_JOB_SEQ (
	ID BIGINT NOT NULL COMMENT 'id',
	UNIQUE_KEY CHAR(1) NOT NULL COMMENT '序号',
	constraint UNIQUE_KEY_UN unique (UNIQUE_KEY)
) ENGINE=InnoDB;

INSERT INTO BATCH_JOB_SEQ values(0, '0');
